#!/usr/bin/env perl

#
# Usage:
# perl hak5-update
#

use strict;
use warnings;
use Cwd 'abs_path';
#use Config::Simple;
use Getopt::Long;
use File::Basename;
use List::MoreUtils qw(uniq);
use LWP::UserAgent;
use HTTP::Request::Common qw(GET);
#use Data::Dumper qw(Dumper);

my $max_links = 10;

my $ua = LWP::UserAgent->new;
   $ua->agent('Mozilla/8.0');


#### Get basic info
my $code_dir        = abs_path($0);
   $code_dir        = dirname($code_dir);
   $code_dir        = dirname($code_dir);


#### Get links
my %links;

$links{"Hak5"}                 = &revision3_links("hak5");
$links{"HakTip"}               = &revision3_links("haktip");
$links{"Metasploit_Minute"}    =   &youtube_links("PLW5y1tjAOzI3n4KRN_ic8N8Qv_ss_dh_F");
$links{"Pineapple_University"} =   &youtube_links("PLW5y1tjAOzI1benBAgqAbMExp5dWkQLgO");
$links{"TekThing"}             =   &podbean_links("tekthing");
$links{"Threat_Wire"}          =   &youtube_links("PLW5y1tjAOzI0Sx4UU2fncEwQ9BQLr5Vlu");


#### Web Methods
sub revision3_links {
	my $show     = $_[0];
	
	my $uri      = "http://revision3.com/shows/$show/episodePage?&limit=$max_links";
	my $res      = $ua->request(GET $uri);
	my @content  = split(/\n/, $res->content);
	
	   @content  = grep { /$show--/ }              @content ;
	s%^.*src="%%                               for(@content);
	s%images/shows%web%                        for(@content);
	s%medium.thumb.jpg".*%hd720p30.h264.mp4%   for(@content);
	   @content  = grep { !/jpg/ }                 @content ;
	   @content  = reverse                         @content ;
	
	return \@content;
}
sub youtube_links {
	my $playlist = $_[0];
	
	my $uri      = "https://www.youtube.com/playlist?list=$playlist";
	my $res      = $ua->request(GET $uri);
	my @content  = split(/\n/, $res->content);
	
	   @content  = grep { /data-video-id/ }        @content ;
	s#.*data-video-ids="(...........)".*#$1#   for(@content);
	   @content  = grep { !/</ }                   @content ;
	   @content  = uniq                            @content ;
	s#(.*)#https://www.youtube.com/watch?v=$1# for(@content);
	my $max      = ($#content > $max_links) ? $max_links : $#content;
	   @content  =                                 @content[0..$max];
	   @content  = reverse                         @content ;
	
	return \@content;
}
sub podbean_links {
	$"="\n\n";
	my $show     = $_[0];
	
	my $uri      = "http://$show.podbean.com/feed/";
	my $res      = $ua->request(GET $uri);
	my @content  = split(/\n/, $res->content);
	
	   @content  = grep { /enclosure url/ }        @content ;
	s#.*url="(.*?)".*#$1#                      for(@content);
	   @content  = grep { /mp4/ }                  @content ;
	s#feed#web#                                for(@content);
	my $max      = ($#content > $max_links) ? $max_links : $#content;
	   @content  =                                 @content[0..$max];
	   @content  = reverse                         @content ;
	
	return \@content;
}


#### See if we already have those links
my $glob = "$code_dir";
   $glob =~ s/([^a-zA-Z0-9_.\/])/\\$1/g;
   $glob = "$glob/episodes.list.d/*.csv";
my @csv  = glob($glob);

for my $csv (@csv) {
	my $show_name = basename($csv, ".csv");
	next if($show_name eq "Specials");
	
	$"="\n";
	print	"\n$show_name\n\n";
	
	my %have_link;
	my $episode = "00";
	
	open IN, "<", $csv or die $!;
	<IN>;
	while(<IN>) {
		chomp;
		my @a = split(/\t/, $_);
		
		$have_link{$a[3]} = 0;
		$episode          = $1 if($a[1] =~ /\d\d(\d\d)/);
	}
	close IN;
	
	open OUT, ">>", $csv or die $!;
	my @link = @{$links{$show_name}};
	for my $link (@link) {
		next if(exists $have_link{$link});
		
		next if($link eq "http://videos.revision3.com/revision3/web/hak5/haktip/0135/hak5--haktip--0135--tcp-flow-control--hd720p30.h264.mp4");
		     # Should be "http://videos.revision3.com/revision3/web/hak5/haktip/0135/hak5--haktip--0135--wireshark-101-tcp-flow-control--hd720p30.h264.mp4"
		
		my $yt     = ($link =~ /youtube/i) ? 1 : 0;
		
		my $season = "00";
		   $season = $1 if($link =~ /(\d\d)/);
		
		if($season > 40 and !$yt) {
			warn ">WARN< High Season Number: $season. SKIPPING => $link\n";
			next;
		
		}
				
		my $subdir = ".";
		   $subdir = "Season_$season" if($show_name eq "Hak5");
		
		my $file   = basename $link;
		my $alt    = $file;
		my $down   = $link;
		my $md5    = "";
		my $sha256 = "";
		
		if($yt) {
			  chomp($alt = `youtube-dl --get-filename $link 2>&1`);
			next if($alt =~ /^ERROR: YouTube said: /);
			
			chomp(my $id = `youtube-dl --get-id       $link`);
			
			$episode++;
			$episode = sprintf("%04d", $episode);
			
			my $show_space =    $show_name;
			  #$show_space =~ s/_/ /g;
			   $show_space =~ s/_.*//g;
			my $show_dash  = lc($show_name);
			   $show_dash  =~ s/_/-/g;
			
			my $title =  substr($alt, 0, index($alt, " - $show_space"));
			   $title =  lc($title);
			   $title =~ s/ /-/g;
			   $title =~ s/,//g;
			   $title =~ s/\(|\)//g;
			   $title =~ s/\[|\]//g;
			   $title =~ s/ - WiFi Pineapple//g;
			   $title =~ s/-$id.mp//ig;
			   $title =~ s/$id//ig;
			   $title =~ s/$show_dash//ig;
			   $title =~ s/[^\w-]//g;
			   $title =~ s/-+/-/g;
			
			$file = "$show_dash--$episode--$title.mp4";
		}
		
		#print     "$subdir\t$file\t$alt\t$down\t$md5\t$sha256\n";
		 print OUT "$subdir\t$file\t$alt\t$down\t$md5\t$sha256\n";
	}
	close OUT;
	
	!system("$code_dir/bin/hak5-download", "--show", "$show_name"          ) or die $!;
}

!system("$code_dir/bin/hak5-hash", "--make") or die $!;



